from launch import LaunchDescription
from launch.actions import DeclareLaunchArgument
from launch.substitutions import LaunchConfiguration, PathJoinSubstitution
from launch_ros.actions import Node
from ament_index_python.packages import get_package_share_directory

def generate_launch_description():
    world_arg = DeclareLaunchArgument('world', default_value='maze_open.world')
    use_gui_arg = DeclareLaunchArgument('use_gui', default_value='true')

    world = LaunchConfiguration('world')
    world_path = PathJoinSubstitution([
        get_package_share_directory('maze_simulation'),
        'worlds',
        world
    ])

    gz = Node(
        package='ros_gz_sim',
        executable='gz_sim',
        output='screen',
        arguments=['-r', '-v2', world_path],
    )

    bridge = Node(
        package='ros_gz_bridge',
        executable='parameter_bridge',
        output='screen',
        arguments=[
            '/model/tb3/cmd_vel@geometry_msgs/msg/Twist@gz.msgs.Twist',
            '/model/tb3/odometry@nav_msgs/msg/Odometry@gz.msgs.Odometry',
            '/scan@sensor_msgs/msg/LaserScan@gz.msgs.LaserScan',
            '/clock@rosgraph_msgs/msg/Clock@gz.msgs.Clock',
        ]
    )

    return LaunchDescription([world_arg, use_gui_arg, gz, bridge])
